using System.IO;
using System.Text;
using DotNetEnv;

namespace PixPost.Helpers;

public static class ConfigHelper {
  public const string ImgBbEndpoint = "IMGBB_ENDPOINT";
  public const string ImgBbApiKey = "IMGBB_API_KEY";
  private static readonly object?[] FalsyValues = ["false", "nil", "null", null, string.Empty, "undefined"];

  /// <summary>
  /// Get application .env absolute path  
  /// </summary>
  /// <returns>The file path</returns>
  public static string GetEnvFilePath() {
    return Path.Join(Environment.CurrentDirectory, ".env");
  }

  /// <summary>
  /// Load .env file into memory. In case of missing, it will be created automatically.
  /// </summary>
  /// <param name="file">The file path, in case of none, the application .env file will be used</param>
  public static void Load(string? file = null) {
    var envFilePath = file ?? GetEnvFilePath();
    if (!File.Exists(envFilePath)) {
      File.WriteAllText(envFilePath, ResourceHelper.ResourceList.GetInitialEnv());
    }

    Env.Load(envFilePath);
  }

  /// <summary>
  /// Saves the environment variables to the specified file
  /// </summary>
  /// <param name="filePath">Absolute file path to save</param>
  /// <param name="variables">Environment variables list</param>
  /// <param name="reload">Upon successful file save, load configuration file into memory</param>
  public static void SaveFile(string filePath, Dictionary<string, string> variables, bool reload = false) {
    var data = new StringBuilder();
    data.AppendLine("# !!DO NOT EDIT THIS FILE!!");
    foreach (var (key, value) in variables) {
      data.AppendLine($"{key}={value}");
    }

    File.WriteAllText(filePath, data.ToString());
    if (reload) Load(filePath);
  }

  /// <summary>
  /// Read the given .env file
  /// </summary>
  /// <param name="filePath">Absolute file path</param>
  /// <returns>Key-value list of variables</returns>
  public static Dictionary<string, string> ReadFile(string? filePath = null) {
    return Env.Load(path: filePath ?? GetEnvFilePath(), options: new LoadOptions(setEnvVars: false)).ToDictionary();
  }

  public static void Save(Dictionary<string, string> config, string? filePath = null, bool reload = false) {
    var envFilePath = filePath ?? GetEnvFilePath();

    var dict = ReadFile(envFilePath);
    foreach (var (key, value) in config) {
      dict[key] = value;
    }

    SaveFile(envFilePath, dict, reload);
  }

  /// <summary>
  /// Get "<em>IMGBB_ENDPOINT</em>" variable value
  /// </summary>
  /// <returns>The value</returns>
  public static string GetEndpoint() {
    return Env.GetString(ImgBbEndpoint).Trim();
  }

  /// <summary>
  /// Get "<em>IMGBB_API_KEY</em>" variable value
  /// </summary>
  /// <returns>The value</returns>
  public static string GetApiKey() {
    return Env.GetString(ImgBbApiKey).Trim();
  }

  /// <summary>
  /// Gets the string representation of the value
  /// </summary>
  /// <param name="key">The key to get</param>
  /// <param name="fallback">Default value in case of none / not exist</param>
  /// <returns>The value</returns>
  public static string GetString(string key, string fallback = "") {
    return Env.GetString(key, fallback);
  }

  /// <summary>
  /// Gets the boolean representation of the value
  /// </summary>
  /// <param name="key">The key to get</param>
  /// <param name="fallback">Default value in case of none / not exist</param>
  /// <returns>The value</returns>
  public static bool GetBool(string key, bool fallback = false) {
    return Env.GetBool(key, fallback);
  }

  /// <summary>
  /// Gets the int representation of the value
  /// </summary>
  /// <param name="key">The key to get</param>
  /// <param name="fallback">Default value in case of none / not exist</param>
  /// <returns>The value</returns>
  public static int GetInt(string key, int fallback = 0) {
    return Env.GetInt(key, fallback);
  }

  /// <summary>
  /// Gets the double representation of the value
  /// </summary>
  /// <param name="key">The key to get</param>
  /// <param name="fallback">Default value in case of none / not exist</param>
  /// <returns>The value</returns>
  public static double GetDouble(string key, double fallback = 0) {
    return Env.GetDouble(key, fallback);
  }

  private static bool IsStringy(object value) {
    return value.GetType().Name.Equals("string", StringComparison.CurrentCultureIgnoreCase);
  }

  private static bool IsFalsy(object value) {
    return IsStringy(value) && FalsyValues.Contains(value);
  }

  public static string ConvertToString(string type, object? value) {
    if (value == null) {
      return "null";
    }

    return type switch {
      "bool" => BoolToString((bool)value),
      "double" => $"{value}",
      "int" => $"{value}",
      _ => $"{value}",
    };
  }

  public static object? ParseValue(string type, object? value) {
    if (value == null || IsStringy(value) && string.IsNullOrEmpty((string)value)) {
      return type switch {
        "bool" => false,
        "double" => 0,
        "int" => 0,
        _ => ""
      };
    }

    return type switch {
      "bool" => IsStringy(value) ? !IsFalsy(value) : bool.Parse((string)value),
      "double" => IsStringy(value) ? double.Parse($"{value}") : (long)value,
      "int" => IsStringy(value) ? int.Parse($"{value}") : (int)value,
      _ => value
    };
  }

  /// <summary>
  /// Convert boolean value into string representation
  /// </summary>
  /// <param name="value">The value</param>
  /// <returns>The value</returns>
  public static string BoolToString(bool value) {
    return value ? "true" : "false";
  }
}