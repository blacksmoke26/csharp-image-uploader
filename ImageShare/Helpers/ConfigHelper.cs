using System.IO;
using System.Text;
using DotNetEnv;

namespace PixPost.Helpers;

public static class ConfigHelper {
  public const string ImgBbEndpoint = "IMGBB_ENDPOINT";
  public const string ImgBbApiKey = "IMGBB_API_KEY";

  /// <summary>
  /// Get application .env absolute path  
  /// </summary>
  /// <returns>The file path</returns>
  public static string GetEnvFilePath() {
    return Path.Join(Environment.CurrentDirectory, ".env");
  }

  /// <summary>
  /// Load .env file into memory. In case of missing, it will be created automatically.
  /// </summary>
  /// <param name="file">The file path, in case of none, the application .env file will be used</param>
  public static void Load(string? file = null) {
    var envFilePath = file ?? GetEnvFilePath();
    if (!File.Exists(envFilePath)) {
      File.WriteAllText(envFilePath, ResourceLoader.ResourceList.GetInitialEnv());
    }

    Env.Load(envFilePath);
  }

  /// <summary>
  /// Saves the environment variables to the specified file
  /// </summary>
  /// <param name="filePath">Absolute file path to save</param>
  /// <param name="variables">Environment variables list</param>
  /// <param name="reload">Upon successful file save, load configuration file into memory</param>
  public static void SaveFile(string filePath, Dictionary<string, string> variables, bool reload = false) {
    var data = new StringBuilder();
    data.AppendLine(@"# !!DO NOT EDIT THIS FILE!!");
    foreach (var (key, value) in variables) {
      data.AppendLine($"{key}={value}");
    }

    File.WriteAllText(filePath, data.ToString());
    if (reload) Load(filePath);
  }

  /// <summary>
  /// Read the given .env file
  /// </summary>
  /// <param name="filePath">Absolute file path</param>
  /// <returns>Key-value list of variables</returns>
  public static Dictionary<string, string> ReadFile(string filePath) {
    return Env.Load(path: filePath, options: new LoadOptions(setEnvVars: false)).ToDictionary();
  }

  /// <summary>
  /// Get "<em>IMGBB_ENDPOINT</em>" variable value
  /// </summary>
  /// <returns>The value</returns>
  public static string GetEndpoint() {
    return Env.GetString(ImgBbEndpoint).Trim();
  }

  /// <summary>
  /// Get "<em>IMGBB_API_KEY</em>" variable value
  /// </summary>
  /// <returns>The value</returns>
  public static string GetApiKey() {
    return Env.GetString(ImgBbApiKey).Trim();
  }
}